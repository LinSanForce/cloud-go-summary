[debug] Created tunnel using local port: '45371'

[debug] SERVER: "127.0.0.1:45371"

[debug] Original chart version: ""
[debug] CHART PATH: /home/yzf/goproject/vitess/helm/vitess

NAME:   vitess-101
REVISION: 1
RELEASED: Wed Jun 24 16:11:51 2020
CHART: vitess-2.0.1-0
USER-SUPPLIED VALUES:
orchestrator:
  enabled: false
pmm:
  enabled: false
topology:
  cells:
  - keyspaces:
    - name: commerce
      schema:
        initial: |-
          create table product(
            sku varbinary(128),
            description varbinary(128),
            price bigint,
            primary key(sku)
          );
          create table customer(
            customer_id bigint not null auto_increment,
            email varbinary(128),
            primary key(customer_id)
          );
          create table corder(
            order_id bigint not null auto_increment,
            customer_id bigint,
            sku varbinary(128),
            price bigint,
            primary key(order_id)
          );
      shards:
      - name: "0"
        tablets:
        - type: replica
          vttablet:
            replicas: 3
      vschema:
        initial: |-
          {
            "tables": {
              "product": {},
              "customer": {},
              "corder": {}
            }
          }
    mysqlProtocol:
      authType: none
      enabled: true
    name: zone1
    vtctld:
      replicas: 1
    vtgate:
      replicas: 1
  deploymentType: test
vttablet:
  terminationGracePeriodSeconds: 1

COMPUTED VALUES:
config:
  backup:
    backup_storage_implementation: gcs
    cron:
      schedule: 0 0 * * *
      suspend: false
    enabled: false
    gcs_backup_storage_bucket: vitess-backups
    gcs_backup_storage_root: vtbackups
    gcsSecret: vitess-gcs-creds
    s3_backup_aws_region: us-east-1
    s3_backup_server_side_encryption: AES256
    s3_backup_storage_bucket: vitess-backups
    s3_backup_storage_root: vtbackups
    s3Secret: vitess-s3-creds
etcd:
  replicas: 3
  resources:
    requests:
      cpu: 200m
      memory: 100Mi
  version: 3.3.10
harbor: harbor.yzf.best:1180
jobs: null
orchestrator:
  enabled: false
  image: vitess/orchestrator:3.1.1
  replicas: 3
  resources:
    requests:
      cpu: 50m
      memory: 350Mi
pmm:
  client:
    resources:
      requests:
        cpu: 50m
        memory: 128Mi
  enabled: false
  pmmTag: 1.17.0
  server:
    dataVolumeClaimAnnotations: null
    dataVolumeClaimSpec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
    env:
      disableTelemetry: true
      metricsMemory: "600000"
      metricsResolution: 1s
      metricsRetention: 720h
      queriesRetention: 8
    resources: null
topology:
  cells:
  - keyspaces:
    - name: commerce
      schema:
        initial: |-
          create table product(
            sku varbinary(128),
            description varbinary(128),
            price bigint,
            primary key(sku)
          );
          create table customer(
            customer_id bigint not null auto_increment,
            email varbinary(128),
            primary key(customer_id)
          );
          create table corder(
            order_id bigint not null auto_increment,
            customer_id bigint,
            sku varbinary(128),
            price bigint,
            primary key(order_id)
          );
      shards:
      - name: "0"
        tablets:
        - type: replica
          vttablet:
            replicas: 3
      vschema:
        initial: |-
          {
            "tables": {
              "product": {},
              "customer": {},
              "corder": {}
            }
          }
    mysqlProtocol:
      authType: none
      enabled: true
    name: zone1
    vtctld:
      replicas: 1
    vtgate:
      replicas: 1
  deploymentType: test
  globalCell:
    etcd:
      replicas: 3
    topologyProvider: k8s
vtctlclient:
  extraFlags: {}
  secrets: []
  vitessTag: helm-2.0.2-0
vtctld:
  extraFlags: {}
  resources: null
  secrets: []
  serviceType: ClusterIP
  vitessTag: helm-2.0.2-0
vtgate:
  extraFlags:
    mysql_server_version: 5.7.9-Vitess
  resources: null
  secrets: []
  serviceType: ClusterIP
  vitessTag: helm-2.0.2-0
vttablet:
  dataVolumeClaimAnnotations: null
  dataVolumeClaimSpec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
  enableHeartbeat: false
  enableSemisync: false
  extraFlags:
    app_pool_size: 40
    dba_pool_size: 20
    queryserver-config-max-result-size: 10000
    queryserver-config-pool-size: 24
    queryserver-config-query-timeout: 30
    queryserver-config-stream-pool-size: 100
    queryserver-config-transaction-cap: 300
  extraMyCnf: ""
  flavor: mysql56
  mysqlImage: percona:5.7.26
  mysqlResources: null
  mysqlSize: prod
  resources: null
  secrets: []
  terminationGracePeriodSeconds: 1
  useKeyspaceNameAsDbName: true
  vitessTag: helm-2.0.2-0
vtworker:
  extraFlags: {}
  resources: null
  secrets: []
  vitessTag: helm-2.0.2-0

HOOKS:
MANIFEST:

---
# Source: vitess/templates/vitess.yaml
###################################
# vtgate PodDisruptionBudget
###################################
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: vtgate-zone1
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: vitess
      component: vtgate
      cell: zone1




  # Tablets for keyspaces
  

    # Keyspace initializations
    # sanitize inputs for labels# define image to use
---
# Source: vitess/templates/vitess.yaml
###################################
# vttablet PodDisruptionBudget
###################################
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: "zone1-commerce-0-replica"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: vitess
      component: vttablet
      cell: "zone1"
      keyspace: "commerce"
      shard: "0"
      type: "replica"

# conditionally add cron job
# set tuple values to more recognizable variables


       # range $tablet
     # range $shard
   # range $keyspace

 # range $cell
---
# Source: vitess/templates/vitess.yaml
# shared ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: vitess-cm
data:
  backup.backup_storage_implementation: gcs
  backup.gcs_backup_storage_bucket: vitess-backups
  backup.gcs_backup_storage_root: vtbackups
  backup.s3_backup_aws_region: us-east-1
  backup.s3_backup_storage_bucket: vitess-backups
  backup.s3_backup_storage_root: vtbackups
  backup.s3_backup_server_side_encryption: AES256

  db.flavor: mysql56
 # end with config
---
# Source: vitess/templates/vitess.yaml
###################################
# vtctld ServiceAccount
###################################
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vtctld
  labels:
    app: vitess
---
# Source: vitess/templates/vitess.yaml
# create a single vttablet serviceaccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vttablet
  labels:
    app: vitess
---
# Source: vitess/templates/vitess.yaml
###################################
# vtgate ServiceAccount
###################################
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vtgate
  labels:
    app: vitess
---
# Source: vitess/templates/vitess.yaml
# Create role for topology crd
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vt-topo-member
rules:
- apiGroups:
  - topo.vitess.io
  resources:
  - vitesstoponodes
  verbs:
  - '*'
---
# Source: vitess/templates/vitess.yaml
# create a single vttablet rolebinding

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vttablet-topo-member
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vt-topo-member
subjects:
- kind: ServiceAccount
  name: vttablet
  namespace: vitess
---
# Source: vitess/templates/vitess.yaml
###################################
# vtgate RoleBinding
###################################
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vtgate-topo-member
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vt-topo-member
subjects:
- kind: ServiceAccount
  name: vtgate
  namespace: vitess
---
# Source: vitess/templates/vitess.yaml
###################################
# vtctld RoleBinding
###################################
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vtctld-topo-member
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vt-topo-member
subjects:
- kind: ServiceAccount
  name: vtctld
  namespace: vitess
---
# Source: vitess/templates/vitess.yaml
# create a single vttablet service
# set tuple values to more recognizable variables
apiVersion: v1
kind: Service
metadata:
  name: vttablet
  labels:
    app: vitess
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  publishNotReadyAddresses: true
  ports:
    - port: 15002
      name: web
    - port: 16002
      name: grpc

  clusterIP: None
  selector:
    app: vitess
    component: vttablet
---
# Source: vitess/templates/vitess.yaml
# create a pool of vtgates per cell
# set tuple values to more recognizable variables# define image to use

###################################
# vtgate Service
###################################
kind: Service
apiVersion: v1
metadata:
  name: vtgate-zone1
  labels:
    component: vtgate
    cell: zone1
    app: vitess
spec:
  ports:
    - name: web
      port: 15001
    - name: grpc
      port: 15991

    - name: mysql
      port: 3306

  selector:
    component: vtgate
    cell: zone1
    app: vitess
  type: ClusterIP
---
# Source: vitess/templates/vitess.yaml
# create one controller per cell
# set tuple values to more recognizable variables# define image to use

###################################
# vtctld Service
###################################
kind: Service
apiVersion: v1
metadata:
  name: vtctld
  labels:
    component: vtctld
    app: vitess
spec:
  ports:
    - name: web
      port: 15000
    - name: grpc
      port: 15999
  selector:
    component: vtctld
    app: vitess
  type: ClusterIP
---
# Source: vitess/templates/vitess.yaml
###################################
# vtctld Service + Deployment
###################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vtctld
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vitess
      component: vtctld
  template:
    metadata:
      labels:
        app: vitess
        component: vtctld
    spec:
      serviceAccountName: vtctld
      securityContext:
        runAsUser: 1000
        fsGroup: 2000
      # set tuple values to more recognizable variables
      containers:
        - name: vtctld
          image: harbor.yzf.best:1180/vitess/vtctld:helm-2.0.2-0
          imagePullPolicy: IfNotPresent
          readinessProbe:
            httpGet:
              path: /debug/health
              port: 15000
            initialDelaySeconds: 30
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /debug/status
              port: 15000
            initialDelaySeconds: 30
            timeoutSeconds: 5
          env:
            
          volumeMounts:
            
            
          resources:
            null
            
          command:
            - bash
            - "-c"
            - |
              set -ex;

              

              eval exec /vt/bin/vtctld $(cat <<END_OF_COMMAND
                -cell="zone1"
                -web_dir="/vt/web/vtctld"
                -web_dir2="/vt/web/vtctld2/app"
                -workflow_manager_init
                -workflow_manager_use_election
                -logtostderr=true
                -stderrthreshold=0
                -port=15000
                -grpc_port=15999
                -service_map="grpc-vtctl"
                -topo_global_root=/vitess/global
                -proxy_tablets=true
                -topo_implementation="k8s"
                -topo_global_server_address="k8s"
                
                
                  
                
                
                
              END_OF_COMMAND
              )

      volumes:
---
# Source: vitess/templates/vitess.yaml
###################################
# vtgate Deployment
###################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vtgate-zone1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vitess
      component: vtgate
      cell: zone1
  template:
    metadata:
      labels:
        app: vitess
        component: vtgate
        cell: zone1
    spec:
      serviceAccountName: vtgate
      securityContext:
        runAsUser: 1000
        fsGroup: 2000
      # set tuple values to more recognizable variables
      
      # affinity pod spec
      affinity:
        
      
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          # prefer to be scheduled with same-cell vttablets
          - weight: 10
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: "vitess"
                  component: "vttablet"
                  cell: "zone1"
      
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          # prefer to stay away from other same-cell vtgates
          - weight: 10
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: "vitess"
                  component: "vtgate"
                  cell: "zone1"





      containers:
        - name: vtgate
          image: harbor.yzf.best:1180/vitess/vtgate:helm-2.0.2-0
          imagePullPolicy: IfNotPresent
          readinessProbe:
            httpGet:
              path: /debug/health
              port: 15001
            initialDelaySeconds: 30
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /debug/status
              port: 15001
            initialDelaySeconds: 30
            timeoutSeconds: 5
          volumeMounts:
            - name: creds
              mountPath: "/mysqlcreds"
            
          resources:
            null
            

          command:
            - bash
            - "-c"
            - |
              set -ex

              eval exec /vt/bin/vtgate $(cat <<END_OF_COMMAND
                -topo_global_root=/vitess/global
                -topo_implementation="k8s"
                -topo_global_server_address="k8s"
                -logtostderr=true
                -stderrthreshold=0
                -port=15001
                -grpc_port=15991

                -mysql_server_port=3306

                -mysql_auth_server_impl="none"


                -service_map="grpc-vtgateservice"
                -cells_to_watch="zone1"
                -tablet_types_to_wait="MASTER,REPLICA"
                -gateway_implementation="discoverygateway"
                -cell="zone1"
                -mysql_server_version="5.7.9-Vitess"
                
              END_OF_COMMAND
              )
      volumes:
        - name: creds
          emptyDir: {}
---
# Source: vitess/templates/vitess.yaml
###################################
# vttablet StatefulSet
###################################
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "zone1-commerce-0-replica"
spec:
  serviceName: vttablet
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: vitess
      component: vttablet
      cell: "zone1"
      keyspace: "commerce"
      shard: "0"
      type: "replica"
  template:
    metadata:
      labels:
        app: vitess
        component: vttablet
        cell: "zone1"
        keyspace: "commerce"
        shard: "0"
        type: "replica"
    spec:
      serviceAccountName: vttablet
      terminationGracePeriodSeconds: 1
      securityContext:
        runAsUser: 1000
        fsGroup: 2000



      initContainers:
        
        
        - name: "init-mysql"
          image: "harbor.yzf.best:1180/vitess/mysqlctld:helm-2.0.2-0"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: vtdataroot
              mountPath: "/vtdataroot"
            - name: vt
              mountPath: "/vttmp"
        
          command: ["bash"]
          args:
            - "-c"
            - |
              set -ex
              # set up the directories vitess needs
              mkdir -p /vttmp/bin
              mkdir -p /vtdataroot/tabletdata
        
              # copy necessary assets to the volumeMounts
              cp /vt/bin/mysqlctld /vttmp/bin/
              cp /bin/busybox /vttmp/bin/
              cp -R /vt/config /vttmp/
        
              # make sure the log files exist
              touch /vtdataroot/tabletdata/error.log
              touch /vtdataroot/tabletdata/slow-query.log
              touch /vtdataroot/tabletdata/general.log
        
              # remove the old socket file if it is still around
              rm -f /vtdataroot/tabletdata/mysql.sock
              rm -f /vtdataroot/tabletdata/mysql.sock.lock
        
        
        - name: init-vttablet
          image: "harbor.yzf.best:1180/vitess/vtctl:helm-2.0.2-0"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: vtdataroot
              mountPath: "/vtdataroot"
          command: ["bash"]
          args:
            - "-c"
            - |
              set -ex
              # Split pod name (via hostname) into prefix and ordinal index.
              hostname=$(hostname -s)
              [[ $hostname =~ ^(.+)-([0-9]+)$ ]] || exit 1
              pod_prefix=${BASH_REMATCH[1]}
              pod_index=${BASH_REMATCH[2]}
              # Prepend cell name since tablet UIDs must be globally unique.
              uid_name=zone1-$pod_prefix
              # Take MD5 hash of cellname-podprefix.
              uid_hash=$(echo -n $uid_name | md5sum | awk "{print \$1}")
              # Take first 24 bits of hash, convert to decimal.
              # Shift left 2 decimal digits, add in index.
              tablet_uid=$((16#${uid_hash:0:6} * 100 + $pod_index))
              # Save UID for other containers to read.
              echo $tablet_uid > /vtdataroot/tabletdata/tablet-uid
              # Tell MySQL what hostname to report in SHOW SLAVE HOSTS.
              echo report-host=$hostname.vttablet > /vtdataroot/tabletdata/report-host.cnf
              # Orchestrator looks there, so it should match -tablet_hostname above.
        
              # make sure that etcd is initialized
              eval exec /vt/bin/vtctl $(cat <<END_OF_COMMAND
                -topo_global_root=/vitess/global
                -topo_implementation=k8s
                -topo_global_server_address=k8s
                -logtostderr=true
                -stderrthreshold=0
                UpdateCellInfo
                -root /vitess/zone1
                -server_address=k8s
                "zone1"
              END_OF_COMMAND
              )

      containers:
        
        
        - name: mysql
          image: "percona:5.7.26"
          imagePullPolicy: IfNotPresent
          readinessProbe:
            exec:
              command: ["mysqladmin", "ping", "-uroot", "--socket=/vtdataroot/tabletdata/mysql.sock"]
            initialDelaySeconds: 60
            timeoutSeconds: 10
        
          volumeMounts:
            - name: vtdataroot
              mountPath: /vtdataroot
            - name: vt
              mountPath: /vt
            
            
          resources:
              null
              
          env:
            - name: VTROOT
              value: "/vt"
            - name: VTDATAROOT
              value: "/vtdataroot"
            - name: GOBIN
              value: "/vt/bin"
            - name: VT_MYSQL_ROOT
              value: "/usr"
            - name: PKG_CONFIG_PATH
              value: "/vt/lib"
        
            - name: VT_DB_FLAVOR
              valueFrom:
                configMapKeyRef:
                  name: vitess-cm
                  key: db.flavor
        
          lifecycle:
            preStop:
              exec:
                command:
                  - "bash"
                  - "-c"
                  - |
                    set -x
        
                    # block shutting down mysqlctld until vttablet shuts down first
                    until [ $VTTABLET_GONE ]; do
        
                      # poll every 5 seconds to see if vttablet is still running
                      /vt/bin/busybox wget --spider localhost:15002/debug/vars
        
                      if [ $? -ne 0 ]; then
                        VTTABLET_GONE=true
                      fi
        
                      sleep 5
                    done
        
          command: ["bash"]
          args:
            - "-c"
            - |
              set -ex
              if [ "$VT_DB_FLAVOR" = "percona" ]; then
                MYSQL_FLAVOR=Percona
              
              elif [ "$VT_DB_FLAVOR" = "mysql" ]; then
                MYSQL_FLAVOR=MySQL56
              
              elif [ "$VT_DB_FLAVOR" = "mysql56" ]; then
                MYSQL_FLAVOR=MySQL56
              
              elif [ "$VT_DB_FLAVOR" = "maria" ]; then
                MYSQL_FLAVOR=MariaDB
              
              elif [ "$VT_DB_FLAVOR" = "mariadb" ]; then
                MYSQL_FLAVOR=MariaDB
              
              elif [ "$VT_DB_FLAVOR" = "mariadb103" ]; then
                MYSQL_FLAVOR=MariaDB103
              
              fi
              
              export MYSQL_FLAVOR
              
              
              export EXTRA_MY_CNF="$EXTRA_MY_CNF:/vt/config/mycnf/default-fast.cnf"
        
              eval exec /vt/bin/mysqlctld $(cat <<END_OF_COMMAND
                -logtostderr=true
                -stderrthreshold=0
                -tablet_dir "tabletdata"
                -tablet_uid "$(cat /vtdataroot/tabletdata/tablet-uid)"
                -socket_file "/vtdataroot/mysqlctl.sock"
                -init_db_sql_file "/vt/config/init_db.sql"
        
              END_OF_COMMAND
              )
        
        
        - name: vttablet
          image: "harbor.yzf.best:1180/vitess/vttablet:helm-2.0.2-0"
          imagePullPolicy: IfNotPresent
          readinessProbe:
            httpGet:
              path: /debug/health
              port: 15002
            initialDelaySeconds: 60
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /debug/status
              port: 15002
            initialDelaySeconds: 60
            timeoutSeconds: 10
          volumeMounts:
            - name: vtdataroot
              mountPath: "/vtdataroot"
            
            
            
        
          resources:
              null
              
          ports:
            - name: web
              containerPort: 15002
            - name: grpc
              containerPort: 16002
          env:
            - name: VTROOT
              value: "/vt"
            - name: VTDATAROOT
              value: "/vtdataroot"
            - name: GOBIN
              value: "/vt/bin"
            - name: VT_MYSQL_ROOT
              value: "/usr"
            - name: PKG_CONFIG_PATH
              value: "/vt/lib"
            
        
            - name: VT_DB_FLAVOR
              valueFrom:
                configMapKeyRef:
                  name: vitess-cm
                  key: db.flavor
        
          lifecycle:
            preStop:
              exec:
                command:
                  - "bash"
                  - "-c"
                  - |
                    set -x
        
                    VTCTLD_SVC=vtctld.vitess:15999
                    VTCTL_EXTRA_FLAGS=()
        
                    master_alias_json=$(/vt/bin/vtctlclient ${VTCTL_EXTRA_FLAGS[@]} -server $VTCTLD_SVC GetShard commerce/0)
                    master_cell=$(jq -r '.master_alias.cell' <<< "$master_alias_json")
                    master_uid=$(jq -r '.master_alias.uid' <<< "$master_alias_json")
                    master_alias=$master_cell-$master_uid
        
                    current_uid=$(cat /vtdataroot/tabletdata/tablet-uid)
                    current_alias=zone1-$current_uid
        
                    if [ $master_alias != $current_alias ]; then
                        # since this isn't the master, there's no reason to reparent
                        exit
                    fi
        
                    # TODO: add more robust health checks to make sure that we don't initiate a reparent
                    # if there isn't a healthy enough replica to take over
                    # - seconds behind master
                    # - use GTID_SUBTRACT
        
                    RETRY_COUNT=0
                    MAX_RETRY_COUNT=100000
                    hostname=$(hostname -s)
        
                    # retry reparenting
                    until [ $DONE_REPARENTING ]; do
        
        
        
                      # reparent before shutting down
                      /vt/bin/vtctlclient ${VTCTL_EXTRA_FLAGS[@]} -server $VTCTLD_SVC PlannedReparentShard -keyspace_shard=commerce/0 -avoid_master=$current_alias
        
        
        
                      # if PlannedReparentShard succeeded, then don't retry
                      if [ $? -eq 0 ]; then
                        DONE_REPARENTING=true
        
                      # if we've reached the max retry count, exit unsuccessfully
                      elif [ $RETRY_COUNT -eq $MAX_RETRY_COUNT ]; then
                        exit 1
        
                      # otherwise, increment the retry count and sleep for 10 seconds
                      else
                        let RETRY_COUNT=RETRY_COUNT+1
                        sleep 10
                      fi
        
                    done
        
                    # delete the current tablet from topology. Not strictly necessary, but helps to prevent
                    # edge cases where there are two masters
                    /vt/bin/vtctlclient ${VTCTL_EXTRA_FLAGS[@]} -server $VTCTLD_SVC DeleteTablet $current_alias
        
        
        
        
          command: ["bash"]
          args:
            - "-c"
            - |
              set -ex
        
              if [ "$VT_DB_FLAVOR" = "percona" ]; then
                MYSQL_FLAVOR=Percona
              
              elif [ "$VT_DB_FLAVOR" = "mysql" ]; then
                MYSQL_FLAVOR=MySQL56
              
              elif [ "$VT_DB_FLAVOR" = "mysql56" ]; then
                MYSQL_FLAVOR=MySQL56
              
              elif [ "$VT_DB_FLAVOR" = "maria" ]; then
                MYSQL_FLAVOR=MariaDB
              
              elif [ "$VT_DB_FLAVOR" = "mariadb" ]; then
                MYSQL_FLAVOR=MariaDB
              
              elif [ "$VT_DB_FLAVOR" = "mariadb103" ]; then
                MYSQL_FLAVOR=MariaDB103
              
              fi
              
              export MYSQL_FLAVOR
              
              
              
        
              eval exec /vt/bin/vttablet $(cat <<END_OF_COMMAND
                -topo_global_root /vitess/global
                -topo_implementation k8s
                -topo_global_server_address k8s
                -logtostderr
                -port 15002
                -grpc_port 16002
                -service_map "grpc-queryservice,grpc-tabletmanager,grpc-updatestream"
                -tablet_dir "tabletdata"
                -tablet-path "zone1-$(cat /vtdataroot/tabletdata/tablet-uid)"
                -tablet_hostname "$(hostname).vttablet"
                -init_keyspace "commerce"
                -init_shard "0"
                -init_tablet_type "replica"
                -health_check_interval "5s"
                -mysqlctl_socket "/vtdataroot/mysqlctl.sock"
                -enable_replication_reporter
        
        
                -init_db_name_override "commerce"
        
        
        
        
                
                
                  
                
                
                -app_pool_size="40"
                -dba_pool_size="20"
                -queryserver-config-max-result-size="10000"
                -queryserver-config-pool-size="24"
                -queryserver-config-query-timeout="30"
                -queryserver-config-stream-pool-size="100"
                -queryserver-config-transaction-cap="300"
                
              END_OF_COMMAND
              )
      volumes:
        - name: vtdataroot
          emptyDir: {}
        - name: vt
          emptyDir: {}
---



        

      # Tablet initializations
      
        # set tuple values to more recognizable variables# sanitize inputs for labels# define images to use#
---
# Source: vitess/templates/vitess.yaml
# Create global resources.
# 当前目录下 以_开头的文件不会渲染为 KUbernetes对象，在其他chart模板中提供外部调用
---
# Source: vitess/templates/vitess.yaml
---






# Create requested resources in each cell.
